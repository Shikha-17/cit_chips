--- 
# TinyTapeout project information
project:
  wokwi_id:    357752736742764545        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "icegoat9"                  # Your name
  title:        "7 Segment Life"      # Project title
  language:     "Wokwi"                     # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Simple 7-segment cellular automaton"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    See the [Wokwi gate layout and simulation](https://wokwi.com/projects/357752736742764545). At a high level...
    
    * Seven flip-flops hold the cellular automaton's internal state, which is also displayed in the seven-segment display.
    * Combinatorial logic generates the next state for each segment based on its neighbors, according to the ruleset...
      * Living segments with exactly one living neighbor (another segment that touches it end to end) survive, and all others die.
      * Dead segments with exactly two living neighbors come to life.
    * When either the system clock or a user toggling the clock input go high, this new state is latched into the automaton's state.
    * There's minor additional support logic to let the user manually shift in an initial condition and handle clock dividing.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
    For full details and a few 'exercises for the reader', see the [github README](https://github.com/icegoat9/tinytapeout03-7seglife) doc link. But at a high level, assuming the IC is mounted on the standard tinytapeout PCB which provides dip switches, clock, and a seven-segment display for output...
    
    * Set all dip switches off and the clock slide switch to the 'manual' clock side.
    * Power on the system. An arbitrary state may appear on the 7-segment display.
    * Set dip switch 4 on ('run mode').
    * Toggle dip switch 1 on and off to advance the automaton to the next state, you should see the 7-segment display update.

    If you want to watch it run automatically (which may quickly settle on an empty state or a static pattern, depending on start state)...
    
    * Set the PCB clock divider to the maximum clock division (255). With a system clock of 6.25kHz, the clock input should now be ~24.5Hz.
    * Set dip switches 5 and 7 on to add a reasonable additional clock divider (see docs for more details on a higher or lower divider).
    * Set dip switch 4 on.
    * Switch the clock slide switch to the 'system clock' side. The display should advance at roughly 1.5Hz if I've done math correctly.

    If you want to load an initial state...
    
    * Set dip switch 4 off ('load mode').
    * Toggle dip switches 2 and/or 3 on and off seven times total, to shift in 0 and 1 values to the automaton internal state.
    * Set dip switch 4 on and run manually or automatically as above.

# A description of what the inputs do
  inputs:           
    - clock
    - load0
    - load1
    - runmode
    - clockdiv8
    - clockdiv4
    - clockdiv2
    - unused

# A description of what the outputs do
  outputs:
    - 7segmentA
    - 7segmentB
    - 7segmentC
    - 7segmentD
    - 7segmentE
    - 7segmentF
    - 7segmentG
    - 7segmentDP

# The following fields are optional
  tag:          "animation, puzzle, game"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "None. Could add debounced momentary pushbuttons in parallel with dip switches 1,2,3 to make loading in new patterns and stepping through a run easier."      # Describe any external hardware needed
  discord:      "icegoat9#3798"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/icegoat9/tinytapeout03-7seglife/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
